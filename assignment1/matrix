#!/usr/bin/env bash
#CS344 400 W2018
#Program 1 - matrices
#Illia Abdullaiev

#Check whether the first matrix should be read from a file or stdin.
#Give other variables names for readability purposes.
operation=$1

#Create a folder for temporary files. Clean up any previous temp files.
rm -rf ./temp

if [ -t 0 ]; then
    #If there is nothing in stdin, treat second and the third parameters as matrix files.
    matrix1=$2
    matrix2=$3
else
    #Create the temporary file to store the contents of stdin.
    mkdir temp
    tempFile="./temp/$$"

    #Write contents of stdin into the temporary file.
    while read -r line ; do
        echo $line >> $tempFile
    done

    #Point matrix1 to the temporary file.
    matrix1=$tempFile
fi

#Checks that matrix 1 file is readable before attempting to read it.
checkMatrix1File() {
  if ! [ -r $matrix1 ];
  then
      echo "$matrix1 is not readable!"
      exit 1
  fi
}

#Same as above ^^
checkMatrix2File() {
  if ! [ -r $matrix2 ];
  then
      echo "$matrix2 is not readable!"
      exit 1
  fi
}


#Prints out the dimensions of the matrix.
dims() {
    checkMatrix1File

    lastLine=""
    rows=0
    columns=0

    #Iterate over each line of the file to count the number of rows.
    while read -r line ; do
        lastLine=$line
        rows=$(expr $rows + 1)
    done < $matrix1

    #Iterate over every number in the line to count the number of columns.
    for number in $lastLine
    do
        columns=$(expr $columns + 1)
    done

    echo "$rows $columns"
}

#Reflects the elements of the matrix along the main diagonal.
transpose() {
    checkMatrix1File

    echo $operation
}

#Returns a row with each element representing a mean of the corresponding column.
mean() {
    checkMatrix1File

    echo $operation
}

#Returns a new matrix which is a result of adding two matrices element-wise.
#Returns an error if two matrices have different dimensions.
add() {
    checkMatrix1File
    checkMatrix2File

    echo $operation
}

#Produces an MxP matrix as a product of MxN and NxP matrices.
multiply() {
    checkMatrix1File
    checkMatrix2File

    echo $operation
}

#Invokes the right function based on operation passed as the first parameter to the script.
$operation "${@:2}"
